/*******************************************************************************
  Copyright (c) 2016, Manuel Freiberger
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.

  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*******************************************************************************/

#ifndef LOG11_TEXTSINK_HPP
#define LOG11_TEXTSINK_HPP

#include "Severity.hpp"

#include <cstddef>


namespace log11
{

//! A logger sink for formatted text.
//!
//! The TextSink is the backend of a logger. Its responsibility is to output
//! the text which has been generated by the Logger frontend.
class TextSink
{
public:
    //! Destroys the sink.
    virtual
    ~TextSink();

    //! Called when a new log entry starts.
    virtual
    void beginLogEntry(Severity severity);

    //! Called when a log entry ends.
    virtual
    void endLogEntry();

    //! Outputs the single character \p ch.
    virtual
    void putChar(char ch) = 0;

    //! Outputs the string \p text which is of length \p size. Note that the
    //! string may or may not be terminated with a NUL character. In general
    //! it is not safe to access <tt>text[size]</tt>.
    //! The default implementation loops over the string and forwards every
    //! single character to putChar().
    virtual
    void putString(const char* text, std::size_t size);
};

} // namespace log11

#endif // LOG11_TEXTSINK_HPP
